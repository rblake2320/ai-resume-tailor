// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  resumes       Resume[]
  jobApplications JobApplication[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     Json     // Structured resume data
  rawText     String?  @db.Text // Plain text version
  isTemplate  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tailoredResumes TailoredResume[]
  
  @@index([userId])
}

model JobPosting {
  id          String   @id @default(cuid())
  title       String
  company     String
  description String   @db.Text
  requirements Json    // Parsed requirements
  keywords    String[] // Extracted keywords
  url         String?
  createdAt   DateTime @default(now())
  
  tailoredResumes TailoredResume[]
  jobApplications JobApplication[]
}

model TailoredResume {
  id            String   @id @default(cuid())
  resumeId      String
  jobPostingId  String
  content       Json     // Tailored resume content
  matchScore    Float    // How well it matches the job
  highlights    Json     // What was emphasized
  pdfUrl        String?  // Stored PDF URL
  createdAt     DateTime @default(now())
  
  resume        Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  jobPosting    JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
  jobApplication JobApplication?
  
  @@unique([resumeId, jobPostingId])
  @@index([resumeId])
  @@index([jobPostingId])
}

model JobApplication {
  id               String   @id @default(cuid())
  userId           String
  jobPostingId     String
  tailoredResumeId String   @unique
  status           ApplicationStatus @default(DRAFT)
  appliedAt        DateTime?
  notes            String?  @db.Text
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobPosting       JobPosting @relation(fields: [jobPostingId], references: [id])
  tailoredResume   TailoredResume @relation(fields: [tailoredResumeId], references: [id])
  
  @@index([userId])
  @@index([status])
}

enum ApplicationStatus {
  DRAFT
  APPLIED
  INTERVIEWING
  REJECTED
  ACCEPTED
}
